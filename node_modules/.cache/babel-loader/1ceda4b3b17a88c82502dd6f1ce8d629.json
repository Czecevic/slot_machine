{"ast":null,"code":"var _jsxFileName = \"/Users/tech16/Desktop/slot_machine/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RepeatButton(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    \"aria-label\": \"Play again.\",\n    id: \"repeatButton\",\n    onClick: props.onClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n\n_c = RepeatButton;\n\nfunction WinningSound() {\n  return /*#__PURE__*/_jsxDEV(\"audio\", {\n    autoplay: \"autoplay\",\n    className: \"player\",\n    preload: \"false\",\n    children: /*#__PURE__*/_jsxDEV(\"source\", {\n      src: \"https://andyhoffman.codes/random-assets/img/slots/winning_slot.wav\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }, this);\n}\n\n_c2 = WinningSound;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      winner: null\n    };\n    this.finishHandler = this.finishHandler.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState({\n      winner: null\n    });\n    this.emptyArray();\n\n    this._child1.forceUpdateHandler();\n\n    this._child2.forceUpdateHandler();\n  }\n\n  ListWord1() {\n    word = [\"sens\", 'le besoin physiologique', 'un petit plaisir', 'une corvée', 'un moment désagreable'];\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        children: word\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n  ListWord2() {\n    wordsens = [\"sens\", 'le besoin physiologique', 'un petit plaisir', 'une corvée', 'un moment désagreable'];\n\n    if (this.ListWord1 == \"sens\") {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: wordsens\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (this.ListWord1 == \"le besoin physiologique\") {\n      return /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          children: word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n  finishHandler(value) {\n    App.matches.push(value);\n\n    if (App.matches.length === 2) {\n      const first = App.matches[0];\n      let results = App.matches.every(match => match === first);\n      this.setState({\n        winner: results\n      });\n    }\n  }\n\n  emptyArray() {\n    App.matches = [];\n  }\n\n  render() {\n    const {\n      winner\n    } = this.state;\n    let repeatButton = null;\n    let winningSound = null;\n\n    if (winner !== null) {\n      repeatButton = /*#__PURE__*/_jsxDEV(RepeatButton, {\n        onClick: this.handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 22\n      }, this);\n    }\n\n    if (winner) {\n      winningSound = /*#__PURE__*/_jsxDEV(WinningSound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 22\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [winningSound, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `spinner-container`,\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {\n          onFinish: this.finishHandler,\n          ref: child => {\n            this._child1 = child;\n          },\n          timer: \"1000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n          onFinish: this.finishHandler,\n          ref: child => {\n            this._child2 = child;\n          },\n          timer: \"1400\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gradient-fade\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), repeatButton]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nApp.matches = [];\n\nclass Spinner extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      position: 0,\n      lastPosition: null\n    };\n    this.multiplier = Math.floor(Math.random() * (4 - 1) + 1);\n    this.start = this.setStartPosition();\n    this.speed = Spinner.iconHeight * this.multiplier;\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n  }\n\n  forceUpdateHandler() {\n    this.reset();\n  }\n\n  reset() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    this.start = this.setStartPosition();\n    this.setState({\n      position: this.start,\n      timeRemaining: this.props.timer\n    });\n    this.timer = setInterval(() => {\n      this.tick();\n    }, 100);\n  }\n\n  setStartPosition() {\n    return Math.floor(Math.random() * 9) * Spinner.iconHeight * -1;\n  }\n\n  moveBackground() {\n    this.setState({\n      position: this.state.position - this.speed,\n      timeRemaining: this.state.timeRemaining - 100\n    });\n  }\n\n  getSymbolFromPosition() {\n    const totalSymbols = 9;\n    const maxPosition = Spinner.iconHeight * (totalSymbols - 1) * -1;\n    let moved = this.props.timer / 100 * this.multiplier;\n    let startPosition = this.start;\n    let currentPosition = startPosition;\n\n    for (let i = 0; i < moved; i++) {\n      currentPosition -= Spinner.iconHeight;\n\n      if (currentPosition < maxPosition) {\n        currentPosition = 0;\n      }\n    }\n\n    this.props.onFinish(currentPosition);\n  }\n\n  tick() {\n    if (this.state.timeRemaining <= 0) {\n      clearInterval(this.timer);\n      this.getSymbolFromPosition();\n    } else {\n      this.moveBackground();\n    }\n  }\n\n  componentDidMount() {\n    clearInterval(this.timer);\n    this.setState({\n      position: this.start,\n      timeRemaining: this.props.timer\n    });\n    this.timer = setInterval(() => {\n      this.tick();\n    }, 100);\n  }\n\n  render() {\n    let {\n      position\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundPosition: '0px ' + position + 'px'\n      },\n      className: ListWord1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nSpinner.iconHeight = 188;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RepeatButton\");\n$RefreshReg$(_c2, \"WinningSound\");","map":{"version":3,"sources":["/Users/tech16/Desktop/slot_machine/src/App.js"],"names":["React","RepeatButton","props","onClick","WinningSound","App","Component","constructor","state","winner","finishHandler","bind","handleClick","setState","emptyArray","_child1","forceUpdateHandler","_child2","ListWord1","word","ListWord2","wordsens","value","matches","push","length","first","results","every","match","render","repeatButton","winningSound","child","Spinner","position","lastPosition","multiplier","Math","floor","random","start","setStartPosition","speed","iconHeight","reset","timer","clearInterval","timeRemaining","setInterval","tick","moveBackground","getSymbolFromPosition","totalSymbols","maxPosition","moved","startPosition","currentPosition","i","onFinish","componentDidMount","backgroundPosition"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction RepeatButton(props) {\n  return (\n    <button \n      aria-label='Play again.' \n      id='repeatButton' \n      onClick={props.onClick}>\n    </button>\n  );\n}\n\nfunction WinningSound() {\n  return (\n  <audio autoplay=\"autoplay\" className=\"player\" preload=\"false\">\n    <source src=\"https://andyhoffman.codes/random-assets/img/slots/winning_slot.wav\" />\n  </audio>  \n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      winner: null\n    }\n    this.finishHandler = this.finishHandler.bind(this)\n    this.handleClick = this.handleClick.bind(this);\n  }  \n\n  handleClick() { \n    this.setState({ winner: null });\n    this.emptyArray();\n    this._child1.forceUpdateHandler();\n    this._child2.forceUpdateHandler();\n  }\n\n  ListWord1 () {\n    word = [\"sens\", 'le besoin physiologique', 'un petit plaisir', 'une corvée', 'un moment désagreable']\n    return (\n      <ul>\n        <li>{word}</li>\n      </ul>\n    )\n  }\n\n  ListWord2 () {\n    wordsens = [\"sens\", 'le besoin physiologique', 'un petit plaisir', 'une corvée', 'un moment désagreable']\n    if (this.ListWord1 == \"sens\") {\n      return (\n        <ul>\n          <li>{wordsens}</li>\n        </ul>\n      )\n    }\n    if (this.ListWord1 == \"le besoin physiologique\") {\n      return (\n        <ul>\n          <li>{word}</li>\n        </ul>\n      )\n    }\n  }\n\n  static matches = [];\n\n  finishHandler(value) {\n    App.matches.push(value);  \n\n    if (App.matches.length === 2) {\n      const first = App.matches[0];\n      let results = App.matches.every(match => match === first)\n      this.setState({ winner: results });\n    }\n  }\n\n  emptyArray() {\n    App.matches = [];\n  }\n\n  render() {\n    const { winner } = this.state;\n    let repeatButton = null;\n    let winningSound = null;\n\n    if (winner !== null) {\n      repeatButton = <RepeatButton onClick={this.handleClick} />\n    }\n    \n    if (winner) {\n      winningSound = <WinningSound />\n    }\n\n    return (\n      <div>\n        {winningSound}\n        <div className={`spinner-container`}>\n          <Spinner onFinish={this.finishHandler} ref={(child) => { this._child1 = child; }} timer=\"1000\" />\n          <Spinner onFinish={this.finishHandler} ref={(child) => { this._child2 = child; }} timer=\"1400\" />\n          <div className=\"gradient-fade\"></div>\n        </div>\n        {repeatButton}          \n      </div>\n    );\n  }\n}  \n  \nclass Spinner extends React.Component {  \n  constructor(props){\n    super(props);\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n  };\n\n  forceUpdateHandler(){\n    this.reset();\n  }; \n\n  reset() {\n    if (this.timer) { \n      clearInterval(this.timer); \n    }  \n\n    this.start = this.setStartPosition();\n\n    this.setState({\n      position: this.start,\n      timeRemaining: this.props.timer        \n    });\n\n    this.timer = setInterval(() => {\n      this.tick()\n    }, 100);      \n  }\n\n  state = {\n    position: 0,\n    lastPosition: null\n  }\n  static iconHeight = 188;\n  multiplier = Math.floor(Math.random()*(4-1)+1);\n\n  start = this.setStartPosition();\n  speed = Spinner.iconHeight * this.multiplier;    \n\n  setStartPosition() {\n    return ((Math.floor((Math.random()*9))) * Spinner.iconHeight)*-1;\n  }\n\n  moveBackground() {\n    this.setState({ \n      position: this.state.position - this.speed,\n      timeRemaining: this.state.timeRemaining - 100\n    })\n  }\n\n  getSymbolFromPosition() {\n    const totalSymbols = 9;\n    const maxPosition = (Spinner.iconHeight * (totalSymbols-1)*-1);\n    let moved = (this.props.timer/100) * this.multiplier\n    let startPosition = this.start;\n    let currentPosition = startPosition;    \n\n    for (let i = 0; i < moved; i++) {              \n      currentPosition -= Spinner.iconHeight;\n\n      if (currentPosition < maxPosition) {\n        currentPosition = 0;\n      }      \n    }\n\n    this.props.onFinish(currentPosition);\n  }\n\n  tick() {      \n    if (this.state.timeRemaining <= 0) {\n      clearInterval(this.timer);        \n      this.getSymbolFromPosition();    \n\n    } else {\n      this.moveBackground();\n    }      \n  }\n\n  componentDidMount() {\n    clearInterval(this.timer);\n\n    this.setState({\n      position: this.start,\n      timeRemaining: this.props.timer\n    });\n\n    this.timer = setInterval(() => {\n      this.tick()\n    }, 100);\n  }\n\n  render() {\n    let { position } = this.state;   \n\n    return (            \n      <div \n        style={{backgroundPosition: '0px ' + position + 'px'}}\n        className={ListWord1}          \n      />\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}