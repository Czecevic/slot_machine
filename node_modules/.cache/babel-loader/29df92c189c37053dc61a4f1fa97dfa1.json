{"ast":null,"code":"var _jsxFileName = \"/Users/tech16/Desktop/slot_machine/src/App.js\";\nimport React from 'react';\nimport './App.css';\nimport myAudio from './dababy.mp3';\nimport text from './text.txt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RepeatButton(props) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    \"aria-label\": \"Play again.\",\n    id: \"repeatButton\",\n    onClick: props.onClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}\n\n_c = RepeatButton;\n\nfunction WinningSound() {\n  return /*#__PURE__*/_jsxDEV(\"audio\", {\n    autoplay: \"autoplay\",\n    className: \"player\",\n    preload: \"false\",\n    children: /*#__PURE__*/_jsxDEV(\"source\", {\n      src: \"./dababy.mp3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = WinningSound;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      winner: null,\n      audio: new Audio(myAudio),\n      bg1: null\n    };\n    this.finishHandler = this.finishHandler.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState({\n      winner: null\n    });\n    this.state.audio.play();\n    this.emptyArray();\n\n    this._child1.forceUpdateHandler();\n\n    this._child2.forceUpdateHandler();\n\n    this._child3.forceUpdateHandler();\n  }\n\n  finishHandler(value) {\n    App.matches.push(value);\n\n    if (App.matches.length === 2) {\n      const first = App.matches[0];\n      let results = App.matches.every(match => match === first);\n      this.setState({\n        winner: results\n      });\n    }\n  }\n\n  async componentDidMount() {\n    let txt = await fetch(text).then(response => response.text());\n    console.log(txt);\n\n    let bg1 = /*#__PURE__*/_jsxDEV(\"svg\", {\n      height: \"564px\",\n      width: \"128px\",\n      children: txt.split(/\\r?\\n/).map(e => {\n        return e;\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }, this);\n\n    console.log('url(\"data:image/svg+xml;utf8,' + bg1 + '\")');\n    document.getElementById('slotStrip').style.background = 'url(\"data:image/svg+xml;utf8,' + bg1 + '\")';\n  }\n\n  emptyArray() {\n    App.matches = [];\n  }\n\n  render() {\n    const {\n      winner\n    } = this.state;\n    let repeatButton = null;\n    let winningSound = null;\n\n    if (winner !== null) {\n      repeatButton = /*#__PURE__*/_jsxDEV(RepeatButton, {\n        onClick: this.handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 22\n      }, this);\n    }\n\n    if (winner) {\n      winningSound = /*#__PURE__*/_jsxDEV(WinningSound, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 22\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [winningSound, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `spinner-container`,\n        children: [/*#__PURE__*/_jsxDEV(Spinner, {\n          onFinish: this.finishHandler,\n          ref: child => {\n            this._child1 = child;\n          },\n          timer: \"1000\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n          onFinish: this.finishHandler,\n          ref: child => {\n            this._child2 = child;\n          },\n          timer: \"1400\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n          onFinish: this.finishHandler,\n          ref: child => {\n            this._child3 = child;\n          },\n          timer: \"1700\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gradient-fade\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), repeatButton]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nApp.matches = [];\n\nclass Spinner extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      position: 0,\n      lastPosition: null\n    };\n    this.multiplier = Math.floor(Math.random() * (4 - 1) + 1);\n    this.start = this.setStartPosition();\n    this.speed = Spinner.iconHeight * this.multiplier;\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n  }\n\n  forceUpdateHandler() {\n    this.reset();\n  }\n\n  reset() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    this.start = this.setStartPosition();\n    this.setState({\n      position: this.start,\n      timeRemaining: this.props.timer\n    });\n    this.timer = setInterval(() => {\n      this.tick();\n    }, 100);\n  }\n\n  setStartPosition() {\n    return Math.floor(Math.random() * 9) * Spinner.iconHeight * -1;\n  }\n\n  moveBackground() {\n    this.setState({\n      position: this.state.position - this.speed,\n      timeRemaining: this.state.timeRemaining - 100\n    });\n  }\n\n  getSymbolFromPosition() {\n    const totalSymbols = 9;\n    const maxPosition = Spinner.iconHeight * (totalSymbols - 1) * -1;\n    let moved = this.props.timer / 100 * this.multiplier;\n    let startPosition = this.start;\n    let currentPosition = startPosition;\n\n    for (let i = 0; i < moved; i++) {\n      currentPosition -= Spinner.iconHeight;\n\n      if (currentPosition < maxPosition) {\n        currentPosition = 0;\n      }\n    }\n\n    this.props.onFinish(currentPosition);\n  }\n\n  tick() {\n    if (this.state.timeRemaining <= 0) {\n      clearInterval(this.timer);\n      this.getSymbolFromPosition();\n    } else {\n      this.moveBackground();\n    }\n  }\n\n  componentDidMount() {\n    clearInterval(this.timer);\n    this.setState({\n      position: this.start,\n      timeRemaining: this.props.timer\n    });\n    this.timer = setInterval(() => {\n      this.tick();\n    }, 100);\n  }\n\n  render() {\n    let {\n      position\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundPosition: '0px ' + position + 'px'\n        },\n        id: \"slotStrip\",\n        className: `icons`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nSpinner.iconHeight = 188;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RepeatButton\");\n$RefreshReg$(_c2, \"WinningSound\");","map":{"version":3,"sources":["/Users/tech16/Desktop/slot_machine/src/App.js"],"names":["React","myAudio","text","RepeatButton","props","onClick","WinningSound","App","Component","constructor","state","winner","audio","Audio","bg1","finishHandler","bind","handleClick","setState","play","emptyArray","_child1","forceUpdateHandler","_child2","_child3","value","matches","push","length","first","results","every","match","componentDidMount","txt","fetch","then","response","console","log","split","map","e","document","getElementById","style","background","render","repeatButton","winningSound","child","Spinner","position","lastPosition","multiplier","Math","floor","random","start","setStartPosition","speed","iconHeight","reset","timer","clearInterval","timeRemaining","setInterval","tick","moveBackground","getSymbolFromPosition","totalSymbols","maxPosition","moved","startPosition","currentPosition","i","onFinish","backgroundPosition"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\nimport myAudio from './dababy.mp3';\nimport text from './text.txt'\nfunction RepeatButton(props) {\n  return (\n    <button\n      aria-label='Play again.'\n      id='repeatButton'\n      onClick={props.onClick}>\n    </button>\n  );\n}\n\nfunction WinningSound() {\n  return (\n    <audio autoplay=\"autoplay\" className=\"player\" preload=\"false\">\n      <source src=\"./dababy.mp3\" />\n    </audio>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      winner: null,\n      audio: new Audio(myAudio),\n      bg1: null\n    }\n    this.finishHandler = this.finishHandler.bind(this)\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState({ winner: null });\n    this.state.audio.play()\n    this.emptyArray();\n    this._child1.forceUpdateHandler();\n    this._child2.forceUpdateHandler();\n    this._child3.forceUpdateHandler();\n  }\n\n  static matches = [];\n\n  finishHandler(value) {\n    App.matches.push(value);\n\n    if (App.matches.length === 2) {\n      const first = App.matches[0];\n      let results = App.matches.every(match => match === first)\n      this.setState({ winner: results });\n    }\n  }\n  async componentDidMount() {\n    let txt = await fetch(text)\n    .then(response => response.text());\n    console.log(txt);\n    let bg1 = <svg height=\"564px\" width=\"128px\">{txt.split(/\\r?\\n/).map(e => { return e })}</svg>;\n    console.log('url(\"data:image/svg+xml;utf8,'+bg1+'\")')\n    document.getElementById('slotStrip').style.background = 'url(\"data:image/svg+xml;utf8,'+bg1+'\")';\n  }\n  emptyArray() {\n    App.matches = [];\n  }\n\n  render() {\n    const { winner } = this.state;\n    let repeatButton = null;\n    let winningSound = null;\n\n    if (winner !== null) {\n      repeatButton = <RepeatButton onClick={this.handleClick} />\n    }\n\n    if (winner) {\n      winningSound = <WinningSound />\n    }\n\n    return (\n      <div>\n        {winningSound}\n        <div className={`spinner-container`}>\n          <Spinner onFinish={this.finishHandler} ref={(child) => { this._child1 = child; }} timer=\"1000\" />\n          <Spinner onFinish={this.finishHandler} ref={(child) => { this._child2 = child; }} timer=\"1400\" />\n          <Spinner onFinish={this.finishHandler} ref={(child) => { this._child3 = child; }} timer=\"1700\" />\n          <div className=\"gradient-fade\"></div>\n        </div>\n        {repeatButton}\n      </div>\n    );\n  }\n}\n\nclass Spinner extends React.Component {\n  constructor(props) {\n    super(props);\n    this.forceUpdateHandler = this.forceUpdateHandler.bind(this);\n  };\n\n  forceUpdateHandler() {\n    this.reset();\n  };\n\n  reset() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n\n    this.start = this.setStartPosition();\n\n    this.setState({\n      position: this.start,\n      timeRemaining: this.props.timer\n    });\n\n    this.timer = setInterval(() => {\n      this.tick()\n    }, 100);\n  }\n\n  state = {\n    position: 0,\n    lastPosition: null\n  }\n  static iconHeight = 188;\n  multiplier = Math.floor(Math.random() * (4 - 1) + 1);\n\n  start = this.setStartPosition();\n  speed = Spinner.iconHeight * this.multiplier;\n\n  setStartPosition() {\n    return ((Math.floor((Math.random() * 9))) * Spinner.iconHeight) * -1;\n  }\n\n  moveBackground() {\n    this.setState({\n      position: this.state.position - this.speed,\n      timeRemaining: this.state.timeRemaining - 100\n    })\n  }\n\n  getSymbolFromPosition() {\n    const totalSymbols = 9;\n    const maxPosition = (Spinner.iconHeight * (totalSymbols - 1) * -1);\n    let moved = (this.props.timer / 100) * this.multiplier\n    let startPosition = this.start;\n    let currentPosition = startPosition;\n\n    for (let i = 0; i < moved; i++) {\n      currentPosition -= Spinner.iconHeight;\n\n      if (currentPosition < maxPosition) {\n        currentPosition = 0;\n      }\n    }\n\n    this.props.onFinish(currentPosition);\n  }\n\n  tick() {\n    if (this.state.timeRemaining <= 0) {\n      clearInterval(this.timer);\n      this.getSymbolFromPosition();\n\n    } else {\n      this.moveBackground();\n    }\n  }\n\n  componentDidMount() {\n    clearInterval(this.timer);\n\n    this.setState({\n      position: this.start,\n      timeRemaining: this.props.timer\n    });\n\n    this.timer = setInterval(() => {\n      this.tick()\n    }, 100);\n  }\n\n  render() {\n    let { position } = this.state;\n\n    return (\n      <div>\n        <div\n          style={{ backgroundPosition: '0px ' + position + 'px' }}\n          id=\"slotStrip\"\n          className={`icons`}\n        />\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}